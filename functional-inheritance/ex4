<html>
<script>
  'use strict';

  function Machine(power) {
    this._power = power;
    this._enabled = false;

    var self = this;

    this.enable = function() {
      // используем внешнюю переменную вместо this
      self._enabled = true;
    };

    this.disable = function() {
      self._enabled = false;
    };

  }

  function Fridge(power) {
    Machine.apply(this, arguments);

    var food = [];

    this.addFood = function(item) {
      // проверка перед добавлением еды, а включен ли холодильник?
      if (!this._enabled) {
        throw new Error("Холодильник выключен");
      }
      // достаточно ли места в холодильнике для еду:
      // food.length - количество еды в холодильнике
      // arguments.length - количество добавляемой еды
      if (food.length + arguments.length >= (this._power / 100)) {
        throw new Error("Холодильник переполнен, новую еду добавить нельзя");
      }

      for (var i = 0; i < arguments.length; i++) {
      food.push(arguments[i]);
    }
    };

    this.getFood = function(item) {
      return food.slice();
    };

    this.filterFood = function(filter) {
      return food.filter(filter);
    };

    this.removeFood = function(item) {
      var idx = food.indexOf(item);
      if (idx != -1) food.splice(idx, 1);
    };
  }


  // Код для проверки:

  var fridge = new Fridge(500);
  fridge.enable();
  fridge.addFood({
    title: "котлета",
    calories: 100
  });
  fridge.addFood({
    title: "сок",
    calories: 30
  });
  fridge.addFood({
    title: "зелень",
    calories: 10
  });
  fridge.addFood({
    title: "варенье",
    calories: 150
  });

  fridge.removeFood("нет такой еды"); // без эффекта
  alert( fridge.getFood().length ); // 4

  var dietItems = fridge.filterFood(function(item) {
    return item.calories < 50;
  });

  dietItems.forEach(function(item) {
    alert( item.title ); // сок, зелень
    fridge.removeFood(item);
  });

  alert( fridge.getFood().length ); // 2

</script>
</html>
